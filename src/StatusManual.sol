pragma ton-solidity >= 0.49.0;
pragma experimental ABIEncoderV2;

import "Manual.sol";

contract StatusManual is Manual {

    function _init1_old() internal  accept {
        INodeS[] files = _files(["cat", "cksum", "cmp", "column", "cut", "df"], [
        _insert("cat", 1, M, "concatenate files and print on the standard output", "[OPTION]... [FILE]...", "Concatenate FILE(s) to standard output.",
            "bEbstTv", ["number nonempty output lines, overrides -n",
            "display $ at end of each line",
            "number all output lines",
            "suppress repeated empty output lines",
            "equivalent to -vT",
            "display TAB characters as ^I",
            "use ^ and M- notation, except for LFD and TAB"]),
        _insert("cksum", 1, M, "checksum and count the bytes in a file", "[FILE]...", "Print CRC checksum and byte counts of each FILE.", "", [""]),
        _insert("cmp", 2, 2, "compare two files byte by byte", "[OPTION]... FILE1 [FILE2]", "Compare two files byte by byte.",
            "bls", ["print differing bytes",
            "output byte numbers and differing byte values",
            "suppress all normal output"]),
        _insert("column", 0, M, "columnate lists", "[-entx] [-c columns] [-s sep] [file ...]", "The column utility formats its input into multiple columns. Rows are filled before columns. Input is taken from file operands, or, by default, from the standard input.  Empty lines are ignored unless the -e option is used.",
            "txne", ["determine the number of columns the input contains and create a table. Columns are delimited with whitespace by default",
            "fill columns before filling rows",
            "disables merging multiple adjacent delimiters into a single delimiter when using the -t option",
            "do not ignore empty lines"]),
        _insert("cut", 0, 1, "remove sections from each line of files", "OPTION... [FILE]...", "Print selected parts of lines from each FILE to standard output.",
            "fsz", ["select only these fields; also print any line that contains no delimiter character, unless the -s option is specified",
            "do not print lines not containing delimiters",
            "line delimiter is NUL, not newline empty"]),
          _insert("df", 1, M, "report file system disk space usage", "[OPTION]... [FILE]...", "displays the amount of disk space available on the file system containing each file name argument.",
            "ahHiklP", ["include pseudo, duplicate, inaccessible file systems",
            "print sizes in powers of 1024 (e.g., 1023M)",
            "print sizes in powers of 1000 (e.g., 1.1G)",
            "list inode information instead of block usage",
            "block size = 1K",
            "limit listing to local file systems",
            "use the POSIX output format"])]);
        _add_reg_files(ROOT_DIR + 1, files);
    }

    function _init1() internal override accept {
        INodeS[] files = _files(["cat", "cksum", "cmp", "column", "cut", "df"], [
        _insert_whole("cat\nconcatenate files and print on the standard output\n[OPTION]... [FILE]...\nConcatenate FILE(s) to standard output.\nbEbstTv\n", 1, M,
            ["number nonempty output lines, overrides -n",
            "display $ at end of each line",
            "number all output lines",
            "suppress repeated empty output lines",
            "equivalent to -vT",
            "display TAB characters as ^I",
            "use ^ and M- notation, except for LFD and TAB"]),
        _insert_whole("cksum\nchecksum and count the bytes in a file\n[FILE]...\nPrint CRC checksum and byte counts of each FILE.\n\n", 1, M, [""]),
        _insert_whole("cmp\ncompare two files byte by byte\n[OPTION]... FILE1 [FILE2]\nCompare two files byte by byte.\nbls\n", 2, 2, ["print differing bytes",
            "output byte numbers and differing byte values",
            "suppress all normal output"]),
        _insert_whole("column\ncolumnate lists\n[-entx] [-c columns] [-s sep] [file ...]\nThe column utility formats its input into multiple columns. Rows are filled before columns. Input is taken from file operands, or, by default, from the standard input.  Empty lines are ignored unless the -e option is used.\ntxne\n", 0, M,
            ["determine the number of columns the input contains and create a table. Columns are delimited with whitespace by default",
            "fill columns before filling rows",
            "disables merging multiple adjacent delimiters into a single delimiter when using the -t option",
            "do not ignore empty lines"]),
        _insert_whole("cut\nremove sections from each line of files\nOPTION... [FILE]...\nPrint selected parts of lines from each FILE to standard output.\nfsz\n", 0, 1,
            ["select only these fields; also print any line that contains no delimiter character, unless the -s option is specified",
            "do not print lines not containing delimiters",
            "line delimiter is NUL, not newline empty"]),
          _insert_whole("df\nreport file system disk space usage\n[OPTION]... [FILE]...\ndisplays the amount of disk space available on the file system containing each file name argument.\nahHiklP",
             1, M, ["include pseudo, duplicate, inaccessible file systems",
            "print sizes in powers of 1024 (e.g., 1023M)",
            "print sizes in powers of 1000 (e.g., 1.1G)",
            "list inode information instead of block usage",
            "block size = 1K",
            "limit listing to local file systems",
            "use the POSIX output format"])]);
        _add_reg_files(ROOT_DIR + 1, files);
    }

    function init2() external override accept {
        INodeS[] files = _files(["du", "file", "findmnt", "grep"], [
        _insert_whole("du\nestimate disk usage\n[OPTION]... [FILE]...\nSummarize disk usage of the set of FILEs, recursively for directories.\nabcDhkLlmPSsx0\n", 1, M, ["write counts for all files, not just directories",
            "block size = 1 byte",
            "produce a grand total",
            "dereference only symlinks that are listed on the command line",
            "print sizes in human readable format (e.g., 1K 234M 2G)",
            "block size = 1K",
            "dereference all symbolic links",
            "count sizes many times if hard linked",
            "block size = 1M",
            "don't follow any symbolic links (this is the default)",
            "for directories do not include size of subdirectories",
            "display only a total for each argument",
            "skip directories on different file systems",
            "end each output line with NUL, not newline"]),
        _insert_whole("file\ndetermine file type\n[OPTION...] [FILE...]\nDetermine type of FILE\nbENv0\n", 1, M, [
            "Do not prepend filenames to output lines (brief mode)",
            "On filesystem errors, issue an error message and exit",
            "Don't pad filenames so that they align in the output",
            "Print the version of the program and exit",
            "Output a null character ‘\\0’ after the end of the filename"]),
        _insert_whole("findmnt\nfind a filesystem\n[options]\t[options] device|mountpoint[options] [device...]\nlist all mounted filesystems or search for a filesystem.\nsmkAbDfnu\n",
             0, M, ["search in static table of filesystems",
            "search in table of mounted filesystems",
            "search in kernel table of mounted filesystems (default)",
            "disable all built-in filters, print all filesystems",
            "print sizes in bytes rather than in human readable format",
            "imitate the output of df(1)",
            "print the first found filesystem only",
            "don't print column headings",
            "don't truncate text in columns"]),
        _insert_whole("grep\nprint lines that match patterns\n[OPTION...] PATTERNS [FILE...]\ngrep searches for PATTERNS in each FILE and prints each line that matches a pattern.\nivwx", 2, M, 
            ["Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other",
            "Invert the sense of matching, to select non-matching lines",
            "Select only those lines containing matches that form whole words",
            "Select only those matches that exactly match the whole line"])]);
        _add_reg_files(ROOT_DIR + 1, files);
    }

    function init3() external override accept {
        INodeS[] files = _files(["ls", "lsblk", "paste", "stat", "wc"], [
        _insert_whole("ls\nlist directory contents\n[OPTION]... [FILE]...\nList information about the FILE (the current directory by default).\naABcCdfFgGhHikLlmnNopqQrRsStuUvxX1\n",
             1, M, [
            "do not ignore entries starting with .",
            "do not list implied . and ..",
            "do not list implied entries ending with ~",
            "with -lt: sort by, and show, ctime; with -l: show ctime and sort by name, otherwise: sort by ctime, newest first",
            "list entries by columns",
            "list directories themselves, not their contents",
            "do not sort, enable -aU",
            "append indicator (one of */=>@|) to entries",
            "like -l, but do not list owner",
            "in a long listing, don't print group names",
            "with -l and -s, print sizes like 1K 234M 2G etc.",
            "follow symbolic links listed on the command line",
            "print the index number of each file",
            "default to 1024-byte blocks for disk usage; used only with -s and per directory totals",
            "for a symbolic link, show information for the file the link references rather than for the link itself",
            "use a long listing format",
            "fill width with a comma separated list of entries",
            "like -l, but list numeric user and group IDs",
            "print entry names without quoting",
            "like -l, but do not list group information",
            "append / indicator to directories",
            "print ? instead of nongraphic characters",
            "enclose entry names in double quotes",
            "reverse order while sorting",
            "list subdirectories recursively",
            "print the allocated size of each file, in blocks",
            "sort by file size, largest first",
            "sort by modification time, newest first",
            "with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort by access time, newest first",
            "do not sort; list entries in directory order",
            "natural sort of (version) numbers within text",
            "list entries by lines instead of by columns",
            "sort alphabetically by entry extension",
            "list one file per line. Avoid \'\\n\' with -q or -b"]),
        _insert_whole("lsblk\nlist block devices\n[options] [device...]\nList information about all available or the specified block devices.\nabfmnOp\n",
            0, M, ["print all devices",
            "print SIZE in bytes rather than in human readable format",
            "output info about filesystems",
            "output info about permissions",
            "don't print headings",
            "output all columns",
            "print complete device path"]),
        _insert_whole("paste\nmerge lines of files\n[OPTION]... [FILE]...\nWrite lines consisting of the sequentially corresponding lines from each FILE, separated by TABs, to standard output.\nsz\n",
            1, M, ["paste one file at a time instead of in parallel",
            "line delimiter is NUL, not newline"]),
        _insert_whole("stat\ndisplay file or file system status\n[OPTION]... FILE...\nDisplay file or file system status.\nLft\n",
            1, M, ["follow links",
            "display file system status instead of file status",
            "print the information in terse form"]),
        _insert_whole("wc\nprint newline, word, and byte counts for each file\n[OPTION]... [FILE]...\nPrint newline, word, and byte counts for each FILE, and a total line if more than one FILE is specified. A word is a non-zero-length sequence of characters delimited by white space.\ncmlLw\n",
            1, M, ["print the byte counts",
            "print the character counts",
            "print the newline counts",
            "print the maximum display width",
            "print the word counts"])]);
        _add_reg_files(ROOT_DIR + 1, files);
        _sb_exports[0].inode_count = _ic - _sb_exports[0].first_inode;
    }
}
