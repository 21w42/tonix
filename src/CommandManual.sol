pragma ton-solidity >= 0.49.0;
pragma experimental ABIEncoderV2;

import "Manual.sol";

contract CommandManual is Manual {

    function _init1() internal override accept {
        INodeS[] files = _files(
            ["account", "basename", "cd", "chgrp", "chmod", "chown", "cp"], [
        _insert("account", 0, M, "print account information", "[OPTIONS] <ADDRESS>", "Obtains and prints account information.",
            "d", ["dump account StateInit to a tvc file"]),
        _insert("basename", 1, M, "strip directory and suffix from filenames", "NAME", "Print NAME with any leading directory components removed.",
            "asz", ["support multiple arguments and treat each as a NAME",
            "remove a trailing SUFFIX; implies -a", "end each output line with NUL, not newline"]),
        _insert("cd", 1, 1, "Change the shell working directory", "[-L|[-P [-e]]] [dir]", "Change the current directory to DIR.  The default DIR is the value of the HOME shell variable.",
            "LPE", ["force symbolic links to be followed",
            "use the physical directory structure without following symbolic links",
            "with -P, and if the current working directory is invalid, signal error"]),
        _insert("chgrp", 2, M, "change group ownership", "[OPTION]... GROUP FILE...", "Change the group of each FILE to GROUP.",
            "cfvRHLP", ["like verbose but report only when a change is made",
            "suppress most error messages",
            "output a diagnostic for every file processed",
            "operate on files and directories recursively",
            "if a command line argument is a symbolic link to a directory, traverse it",
            "traverse every symbolic link to a directory encountered",
            "do not traverse any symbolic links (default)"]),
        _insert("chmod", 2, M, "change file mode bits", "[OPTION]... MODE FILE...", "chmod changes the file mode bits of each given file according to mode",
            "cfvR", ["like verbose but report only when a change is made",
            "suppress most error messages",
            "output a diagnostic for every file processed",
            "change files and directories recursively"]),
        _insert("chown", 2, M, "change file owner and group", "[OPTION]... [OWNER] FILE...", "chown changes the user and/or group ownership of each given file.",
            "cfvRHLP", ["like verbose but report only when a change is made",
            "suppress most error messages",
            "output a diagnostic for every file processed",
            "operate on files and directories recursively",
            "if a command line argument is a symbolic link to a directory, traverse it",
            "traverse every symbolic link to a directory encountered",
            "do not traverse any symbolic links (default)"]),
        _insert("cp", 2, M, "copy files and directories", "[OPTION]... [-T] SOURCE DEST\t[OPTION]... SOURCE... DIRECTORY\t[OPTION]... -t DIRECTORY SOURCE...",
            "Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.",
            "abfHlLnprstTuvx", ["same as -dR -p",
            "make a backup of each existing destination file",
            "if an existing destination file cannot be opened, remove it and try again",
            "follow command-line symbolic links in SOURCE",
            "hard link files instead of copying",
            "always follow symbolic links in SOURCE",
            "do not overwrite an existing file",
            "never follow symbolic links in SOURCE",
            "copy directories recursively",
            "make symbolic links instead of copying",
            "copy all SOURCE arguments into DIRECTORY",
            "treat DEST as a normal file",
            "copy only when the SOURCE file is newer than the destination file or when the destination file is missing",
            "explain what is being done",
            "stay on this file system"])]);
        _add_reg_files(ROOT_DIR + 1, files);
    }

    function init2() external override accept {
        INodeS[] files = _files(["dd", "dirname", "echo", "help", "id", "ln", "man", "mkdir"], [
        _insert("dd", 0, M, "convert and copy a file", "[OPERAND]...", "Copy a file, converting and formatting according to the operands.", "", [""]),
        _insert("dirname", 1, M, "strip last component from file name", "[OPTION] NAME...", "Output NAME with its last non-slash component and trailing slashes removed; if NAME contains no /'s, output '.' (meaning the current directory).",
            "z", ["end each output line with NUL, not newline"]),
        _insert("echo", 0, M, "display a line of text", "[OPTION]... [STRING]...", "Echo the STRING(s) to standard output.", "n", [
            "do not output the trailing newline"]),
        _insert("help", 0, M, "help", "", "", "dm", [
            "output short description for each topic",
            "display usage in pseudo-manpage format"]),
        _insert("id", 0, 1, "print real and effective user and group IDs", "[OPTION]... [USER]", "Print user and group information for the specified USER, or (when USER omitted) for the current user.",
            "gGnruz", ["print only the effective group ID",
            "print all group IDs",
            "print a name instead of a number, for -ugG",
            "print the real ID instead of the effective ID, with -ugG",
            "print only the effective user ID",
            "delimit entries with NUL characters, not whitespace"]),
        _insert("ln", 2, M, "make links between files", "[OPTION]... [-T] TARGET LINK_NAME\t[OPTION]... TARGET\t[OPTION]... TARGET... DIRECTORY\t[OPTION]... -t DIRECTORY TARGET...",
            "In the 1st form, create a link to TARGET with the name LINK_NAME.\tIn the 2nd form, create a link to TARGET in the current directory.\tIn the 3rd and 4th forms, create links to each TARGET in DIRECTORY.",
            "bfLbPrstTv", ["make a backup of each existing destination file",
            "remove existing destination files",
            "dereference TARGETs that are symbolic links",
            "treat LINK_NAME as a normal file if it is a symbolic link to a directory",
            "make hard links directly to symbolic links",
            "create symbolic links relative to link location",
            "make symbolic links instead of hard links",
            "specify the DIRECTORY in which to create the links",
            "treat LINK_NAME as a normal file always",
            "print name of each linked file"]),
        _insert("man", 0, M, "an interface to the system reference manuals", "[COMMAND]", "man is the system's manual pager.  Each page argument given to man is normally the name of a program, utility or function.",
            "a", ["find all matching manual pages"]),
        _insert("mkdir", 1, M, "make directories", "[OPTION]... DIRECTORY...", "Create the DIRECTORY(ies), if they do not already exist.",
            "mpv", ["set file mode (as in chmod), not a=rwx - umask",
            "no error if existing, make parent directories as needed",
            "print a message for each created directory"])]);
        _add_reg_files(ROOT_DIR + 1, files);
    }

    function init3() external override accept {
        INodeS[] files = _files(["mount", "mv", "ping", "pwd", "rm", "rmdir", "touch", "uname", "whoami"], [
        _insert("mount", 0, 3, "mount a filesystem", "[-l]\t-a [-fnrvw]\t-[NTBM] <source> <directory>", "attach the filesystem found on some device to the file tree",
            "acfTlbrvwNBM", ["mount all filesystems mentioned in fstab",
            "don't canonicalize paths",
            "dry run; skip the mount(2) syscall",
            "alternative file to /etc/fstab",
            "show also filesystem labels",
            "don't write to /etc/mtab",
            "mount the filesystem read-only",
            "say what is being done",
            "mount the filesystem read-write (default)",
            "perform mount in another namespace",
            "mount a subtree somewhere else",
            "move a subtree to some other place"]),
        _insert("mv", 2, M, "move (rename) files", "[OPTION]... [-T] SOURCE DEST\t[OPTION]... SOURCE... DIRECTORY\t[OPTION]... -t DIRECTORY SOURCE...",
            "Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.",
            "bfntTuv", ["make a backup of each existing destination file",
            "do not prompt before overwriting",
            "do not overwrite an existing file",
            "move all SOURCE arguments into DIRECTORY",
            "treat DEST as a normal file",
            "move only when the SOURCE file is newer than the destination file or when the destination file is missing",
            "explain what is being done"]),
        _insert("ping", 0, M, "send a request to network hosts", "[-dDfhLnqUv] {destination}", "Elicit a response from a host.",
            "Dnqv", ["print timestamps",
            "no dns name resolution",
            "quiet output",
            "verbose output"]),
        _insert("pwd", 0, 0, "print name of the working directory", "[OPTION]...", "Print the full filename of the current working directory.",
            "LP", ["use PWD from environment, even if it contains symlinks",
            "avoid all symlinks"]),
        _insert("rm", 1, M, "remove files or directories", "[OPTION]... [FILE]...", "rm removes each specified file. By default, it does not remove directories.",
            "frdv", ["ignore nonexistent files and arguments, never prompt",
            "remove directories and their contents recursively",
            "remove empty directories",
            "explain what is being done"]),
        _insert("rmdir", 1, M, "remove empty directories", "[OPTION]... DIRECTORY...", "Remove the DIRECTORY(ies), if they are empty.",
            "pv", ["remove DIRECTORY and its ancestors; e.g., 'rmdir -p a/b/c' is similar to 'rmdir a/b/c a/b a'",
            "output a diagnostic for every directory processed"]),
        _insert("touch", 1, M, "change file timestamps", "[OPTION]... FILE...", "Update the access and modification times of each FILE to the current time.",
            "acm", ["change only the access time",
            "do not create any files",
            "change only the modification time"]),
        _insert("uname", 0, 0, "print system information", "[OPTION]...", "Print certain system information.  With no OPTION, same as -s.",
            "asnrvmpio", ["print all information, in the following order, except omit -p and -i if unknown:",
            "print the kernel name",
            "print the network node hostname",
            "print the kernel release",
            "print the kernel version",
            "print the machine hardware name",
            "print the processor type (non-portable)",
            "print the hardware platform (non-portable)",
            "print the operating system"]),
        _insert("whoami", 0, 0, "print effective userid", "[OPTION]...", "Print the user name associated with the current effective user ID.", "", [""])]);
        _add_reg_files(ROOT_DIR + 1, files);
        _sb_exports[0].inode_count = _ic - _sb_exports[0].first_inode;
    }
}
